[{"D:\\CODES\\projects\\octocatprofile_v2\\src\\index.js":"1","D:\\CODES\\projects\\octocatprofile_v2\\src\\App.js":"2","D:\\CODES\\projects\\octocatprofile_v2\\src\\pages\\intro.page.jsx":"3","D:\\CODES\\projects\\octocatprofile_v2\\src\\reportWebVitals.js":"4","D:\\CODES\\projects\\octocatprofile_v2\\src\\pages\\user.page.jsx":"5","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\footer\\footer.component.jsx":"6","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\profile\\profile.component.jsx":"7","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\repos\\project.component.jsx":"8","D:\\CODES\\projects\\octocatprofile_v2\\src\\assets\\github.colors.js":"9","D:\\CODES\\projects\\octocatprofile_v2\\src\\assets\\mock_reposData.js":"10","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\stats.component.jsx":"11","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartMostStarred.component.jsx":"12","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartStarsLanguage.component.jsx":"13","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartTopLanguages.component.jsx":"14","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\repos\\repos.component.jsx":"15"},{"size":593,"mtime":1610573253584,"results":"16","hashOfConfig":"17"},{"size":619,"mtime":1610899834810,"results":"18","hashOfConfig":"17"},{"size":641,"mtime":1610899937185,"results":"19","hashOfConfig":"17"},{"size":362,"mtime":1606924537432,"results":"20","hashOfConfig":"17"},{"size":2608,"mtime":1610907528264,"results":"21","hashOfConfig":"17"},{"size":1615,"mtime":1610907196013,"results":"22","hashOfConfig":"17"},{"size":1488,"mtime":1610907234478,"results":"23","hashOfConfig":"17"},{"size":1376,"mtime":1610993627996,"results":"24","hashOfConfig":"17"},{"size":5445,"mtime":1610907492992,"results":"25","hashOfConfig":"17"},{"size":54312,"mtime":1610985067958,"results":"26","hashOfConfig":"17"},{"size":1862,"mtime":1610988891970,"results":"27","hashOfConfig":"17"},{"size":2595,"mtime":1610989913643,"results":"28","hashOfConfig":"17"},{"size":663,"mtime":1610981004627,"results":"29","hashOfConfig":"17"},{"size":2227,"mtime":1611004852228,"results":"30","hashOfConfig":"17"},{"size":1608,"mtime":1610906598247,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5bt9rf",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"D:\\CODES\\projects\\octocatprofile_v2\\src\\index.js",[],["69","70"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\App.js",["71"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\pages\\intro.page.jsx",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\reportWebVitals.js",[],["72","73"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\pages\\user.page.jsx",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\footer\\footer.component.jsx",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\profile\\profile.component.jsx",[],["74","75"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\repos\\project.component.jsx",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\assets\\github.colors.js",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\assets\\mock_reposData.js",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\stats.component.jsx",[],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartMostStarred.component.jsx",["76"],"import \"./charts.styles.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport colors from \"../../assets/github.colors\";\r\n\r\nimport reposMockData from \"../../assets/mock_reposData\";\r\n\r\nconst ChartMostStarred = ({ reposData }) => {\r\n\r\n    const mostStarred = []\r\n    for (let repo of reposData) {\r\n        mostStarred.push([repo.name, repo.language, repo.stargazers_count])\r\n    }\r\n    const sortedMostStarred = mostStarred.sort((a, b) => b[2] - a[2]).slice(0, 5)\r\n    // console.log(\"mostStarred: \", mostStarred.sort((a, b) => b[2] - a[2]).slice(0, 5))\r\n\r\n    const w = 350;\r\n    const h = 300;\r\n    const padding = 60;\r\n\r\n    const xScale = d3.scaleBand()\r\n                    .domain(sortedMostStarred.map(i => i[0]))\r\n                    .rangeRound([padding, w - padding]) // works in pixels\r\n                    .padding(0.2); // padding between bars\r\n\r\n    const yScale = d3.scaleLinear()\r\n                        .domain([0, d3.max(sortedMostStarred, (d) => d[2])]) // according to the data\r\n                        .range([h - padding, padding]) // the space we have in the canvas\r\n\r\n\r\n    const svg = d3.select(\".chartMostStarred\")\r\n                    .attr(\"width\", w)\r\n                    .attr(\"height\", h)\r\n                    .attr(\"background-color\", \"white\")\r\n\r\n\r\n    svg.selectAll(\"rect\")\r\n        .data(sortedMostStarred)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"width\", xScale.bandwidth())\r\n        .attr(\"height\", (d) => h - padding - yScale(d[2]))\r\n        .attr(\"x\", (d) => xScale(d[0]))\r\n        .attr(\"y\", (d) => yScale(d[2]))\r\n        .attr(\"fill\", (d) =>  colors[d[1]])\r\n        .attr(\"class\", \"bars\") // still need to define \".bars\" in css\r\n        .append(\"title\")\r\n        .text((d) => `${d[1]}`)\r\n\r\n\r\n    // svg.selectAll(\"text\")\r\n    //     .data(sortedMostStarred)\r\n    //     .enter()\r\n    //     .append(\"text\")\r\n    //     .text((d) => d[0])\r\n    //     .attr(\"x\", (d) => xScale(d[0]))\r\n    //     .attr(\"y\", h - padding)\r\n    //     .attr(\"transform\", \"rotate(90deg)\")\r\n\r\n    const xAxis = d3.axisBottom(xScale)\r\n    const yAxis = d3.axisLeft(yScale)\r\n\r\n    svg.append(\"g\")\r\n        .attr('transform', `translate(0, ${h - padding})`)\r\n        .call(xAxis)\r\n        .selectAll(\"text\")\r\n        .attr(\"y\", 10)\r\n        .attr(\"x\", 0)\r\n        .attr(\"transform\", \"rotate(-30)\")\r\n        .style(\"text-anchor\", \"end\");\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + padding + \", 0)\")\r\n        .call(yAxis)\r\n\r\n\r\n\r\n    \r\n    return(\r\n        <svg className=\"chartMostStarred\">\r\n\r\n        </svg>\r\n    )\r\n}\r\n\r\n\r\nexport default ChartMostStarred;","D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartStarsLanguage.component.jsx",["77"],"import \"./charts.styles.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport reposMockData from \"../../assets/mock_reposData\";\r\n\r\nconst ChartStarsLanguage = ({ reposData }) => {\r\n\r\n    const starsLanguage = {}\r\n    for (let repo of reposMockData) {\r\n        if (!starsLanguage[repo.language]) {\r\n            starsLanguage[repo.language] = repo.stargazers_count\r\n        } else {\r\n            starsLanguage[repo.language] = starsLanguage[repo.language] + repo.stargazers_count\r\n        }\r\n    }\r\n    console.log(\"starsLanguage: \", starsLanguage)\r\n\r\n    return(\r\n        <svg className=\"chartStarsLanguage\">\r\n\r\n        </svg>\r\n    )\r\n}\r\n\r\n\r\nexport default ChartStarsLanguage;",["78","79"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\stats\\chartTopLanguages.component.jsx",["80"],"D:\\CODES\\projects\\octocatprofile_v2\\src\\components\\repos\\repos.component.jsx",["81"],"import React, { useState, useEffect } from \"react\";\r\nimport Project from \"./project.component\";\r\nimport \"./repos.styles.css\";\r\n\r\n\r\nconst Repos = ({ reposData }) => {\r\n    // const [ sortedRepos, setSortedRepos ] = useState([...reposData])\r\n    const [sortingItem, serSortingItem] = useState(\"stargazers_count\");\r\n\r\n    const handleSorting = (e) => {\r\n        e.preventDefault();\r\n        const val = e.target.value\r\n        console.log(\"value\", e.target.value)\r\n        serSortingItem(val)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setSortedRepos([...reposData].sort((a, b) => b[sortingItem] - a[sortingItem]))\r\n    // }, [sortingItem]) \r\n\r\n    return (\r\n        <div className=\"repos-container\">\r\n\r\n            <div className=\"repos-main\">\r\n\r\n                <label for=\"sorting\">Top Repositories\r\n                    <select id=\"sorting\" className=\"input-selection\" onChange={handleSorting}>\r\n                        <option value=\"stargazers_count\" >by Stars</option>\r\n                        <option value=\"forks\" >by Forks</option>\r\n                        <option value=\"size\" >by Bytes</option>\r\n                    </select>\r\n                :</label>\r\n\r\n                <div className=\"projects-container\">\r\n\r\n                    {\r\n                        reposData\r\n                            .sort((a, b) => b[sortingItem] - a[sortingItem])\r\n                            .slice(0, 8)\r\n                            .map((item, id) => <Project item={item} key={id} />)\r\n\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Repos;",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":6,"column":20,"nodeType":"88","messageId":"89","endLine":6,"endColumn":26},{"ruleId":"82","replacedBy":"90"},{"ruleId":"84","replacedBy":"91"},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"94","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":21},{"ruleId":"86","severity":1,"message":"95","line":2,"column":13,"nodeType":"88","messageId":"89","endLine":2,"endColumn":15},{"ruleId":"82","replacedBy":"96"},{"ruleId":"84","replacedBy":"97"},{"ruleId":"86","severity":1,"message":"98","line":57,"column":11,"nodeType":"88","messageId":"89","endLine":57,"endColumn":18},{"ruleId":"86","severity":1,"message":"99","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar",["100"],["101"],["100"],["101"],"'reposMockData' is defined but never used.","'d3' is defined but never used.",["100"],["101"],"'content' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]